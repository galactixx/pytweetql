from pytweetql.validation._nodes import *
from pytweetql._typing import APIResponse
from pytweetql.response.user import Users
from pytweetql.response.tweet import Tweets
from pytweetql.response.twitterlist import TwitterLists

def parse_create_list(response: APIResponse) -> TwitterLists:
    """
    Parse tweet data from the CreateList endpoint.

    Args:
        response (APIResponse): The response generated by API.
    
    Returns:
        Users: A class containing the parsed response and status of the parsing.
    """
    return TwitterLists(
        response=response,
        schema=nodes_list_create,
        endpoint='CreateList'
    )


def parse_user_by_id(response: APIResponse) -> Users:
    """
    Parse tweet data from the UserByRestId endpoint.

    Args:
        response (APIResponse): The response generated by API.
    
    Returns:
        Users: A class containing the parsed response and status of the parsing.
    """
    return Users(
        response=response,
        schema=nodes_user_by_rest_id,
        endpoint='UserByRestId'
    )


def parse_users_by_ids(response: APIResponse) -> Users:
    """
    Parse tweet data from the UsersByRestIds endpoint.

    Args:
        response (APIResponse): The response generated by API.
    
    Returns:
        Users: A class containing the parsed response and status of the parsing.
    """
    return Users(
        response=response,
        schema=nodes_users_by_rest_ids,
        endpoint='UsersByRestIds'
    )


def parse_list_members(response: APIResponse) -> Users:
    """
    Parse tweet data from the ListMembers endpoint.

    Args:
        response (APIResponse): The response generated by API.
    
    Returns:
        Users: A class containing the parsed response and status of the parsing.
    """
    return Users(
        response=response,
        schema=nodes_list_members,
        endpoint='ListMembers'
    )


def parse_users_by_screen_name(response: APIResponse) -> Users:
    """
    Parse tweet data from the UserByScreenName endpoint.

    Args:
        response (APIResponse): The response generated by API.
    
    Returns:
        Users: A class containing the parsed response and status of the parsing.
    """
    return Users(
        response=response,
        schema=nodes_user_by_screen_name,
        endpoint='UserByScreenName'
    )


def parse_tweet_result_by_id(
    response: APIResponse, 
    remove_promotions: bool = True
) -> Tweets:
    """
    Parse tweet data from the TweetResultByRestId endpoint.

    Args:
        response (APIResponse): The response generated by API.
        remove_promotions (bool): Boolean indicating whether to remove promotional tweets.

    Returns:
        Tweets: A class containing the parsed response and status of the parsing.
    """
    return Tweets(
        response=response,
        schema=nodes_tweet_result_by_id,
        remove_promotions=remove_promotions,
        endpoint='TweetResultByRestId'
    )


def parse_user_tweets(
    response: APIResponse, 
    remove_promotions: bool = True
) -> Tweets:
    """
    Parse tweet data from the UserTweets endpoint.

    Args:
        response (APIResponse): The response generated by API.
        remove_promotions (bool): Boolean indicating whether to remove promotional tweets.

    Returns:
        Tweets: A class containing the parsed response and status of the parsing.
    """
    return Tweets(
        response=response,
        schema=nodes_user_tweets,
        remove_promotions=remove_promotions,
        endpoint='UserTweets'
    )


def parse_create_tweet(
    response: APIResponse, 
    remove_promotions: bool = True
) -> Tweets:
    """
    Parse tweet data from the CreateTweet endpoint.

    Args:
        response (APIResponse): The response generated by API.
        remove_promotions (bool): Boolean indicating whether to remove promotional tweets.

    Returns:
        Tweets: A class containing the parsed response and status of the parsing.
    """
    return Tweets(
        response=response,
        schema=nodes_create_tweet,
        remove_promotions=remove_promotions,
        endpoint='CreateTweet'
    )